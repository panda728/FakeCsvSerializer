﻿<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Buffers" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Buffers" #>
<#@ output extension=".cs" #>
<#
    const int MaxTupleCount = 8;
    string BuildTypeParameter(int i) => "T" + ((i == 8) ? "Rest" : i.ToString());
    string BuildTypeParameters(int i) => string.Join(", ", Enumerable.Range(1, i).Select(BuildTypeParameter));
    string BuildGetItemProperty(int i) => ((i == 8) ? "Rest" : $"Item{i}");
    string BuildTitleParameter(int i) => @$"""value{i}""";
    string BuildTitleParameters(int i) => string.Join(", ", Enumerable.Range(1, i).Select(BuildTitleParameter));
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY `Serializers/TupleSerializers.tt`. DO NOT CHANGE IT.
// </auto-generated>
#nullable enable
namespace FakeCsvSerializer.Serializers
{
<# for(var i = 1; i <= MaxTupleCount; i++) { #>
    public sealed class TupleCsvSerializer<<#= BuildTypeParameters(i) #>> : ICsvSerializer<Tuple<<#= BuildTypeParameters(i) #>>>
<# if(i == MaxTupleCount) { #>
        where TRest : notnull
<# } #>
    {
		public void WriteTitle(ref CsvSerializerWriter writer, Tuple<<#= BuildTypeParameters(i) #>> value, CsvSerializerOptions options, string name = ""){
        
            writer.EnterAndValidate();
<# for(var j = 1; j <= i; j++) { #>
            writer.WriteDelimiter();
            options.GetRequiredSerializer<<#= BuildTypeParameter(j) #>>().WriteTitle(ref writer, value.<#= BuildGetItemProperty(j) #>, options, <#= BuildTitleParameter(j) #>);
<# } #>
            writer.Exit();
        }

        public void Serialize(ref CsvSerializerWriter writer, Tuple<<#= BuildTypeParameters(i) #>> value, CsvSerializerOptions options)
        {
            if (value == null) {
                writer.WriteEmpty();
                return;
            }
            writer.EnterAndValidate();
<# for(var j = 1; j <= i; j++) { #>
            writer.WriteDelimiter();
            options.GetRequiredSerializer<<#= BuildTypeParameter(j) #>>().Serialize(ref writer, value.<#= BuildGetItemProperty(j) #>, options);
<# } #>
            writer.Exit();
        }
    }

    public sealed class ValueTupleCsvSerializer<<#= BuildTypeParameters(i) #>> : ICsvSerializer<ValueTuple<<#= BuildTypeParameters(i) #>>>
<# if(i == MaxTupleCount) { #>
        where TRest : struct
<# } #>
    {
		public void WriteTitle(ref CsvSerializerWriter writer, ValueTuple<<#= BuildTypeParameters(i) #>> value, CsvSerializerOptions options, string name = ""){
            writer.EnterAndValidate();
<# for(var j = 1; j <= i; j++) { #>
<# if(j != 1) { #>
            writer.WriteDelimiter();
<# } #>
            options.GetRequiredSerializer<<#= BuildTypeParameter(j) #>>().WriteTitle(ref writer, value.<#= BuildGetItemProperty(j) #>, options,<#= BuildTitleParameter(j) #>);
<# } #>
            writer.Exit();
        }

        public void Serialize(ref CsvSerializerWriter writer, ValueTuple<<#= BuildTypeParameters(i) #>> value, CsvSerializerOptions options)
        {
            writer.EnterAndValidate();
<# for(var j = 1; j <= i; j++) { #>
<# if(j != 1) { #>
            writer.WriteDelimiter();
<# } #>
            options.GetRequiredSerializer<<#= BuildTypeParameter(j) #>>().Serialize(ref writer, value.<#= BuildGetItemProperty(j) #>, options);
<# } #>
            writer.Exit();
        }
    }

<# } #>

    internal static class TupleCsvSerializer
    {
        internal static Type GetTupleCsvSerializerType(int i)
        {
            switch (i)
            {
<# for(var i = 1; i <= MaxTupleCount; i++) { #>
                case <#= i #>:
                    return typeof(TupleCsvSerializer<<#= new string(',', i - 1) #>>);
<# } #>
                default:
                    break;
            }

            throw new InvalidOperationException($"TupleCsvSerializer<T1...T{i}> is not found.");
        }

        internal static Type GetValueTupleCsvSerializerType(int i)
        {
            switch (i)
            {
<# for(var i = 1; i <= MaxTupleCount; i++) { #>
                case <#= i #>:
                    return typeof(ValueTupleCsvSerializer<<#= new string(',', i - 1) #>>);
<# } #>
                default:
                    break;
            }

            throw new InvalidOperationException($"ValueTupleCsvSerializer<T1...T{i}> is not found.");
        }
    }
}